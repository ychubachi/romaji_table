# -*- coding: utf-8 -*-
require 'generator'

describe Generator, '#変換表作成' do
  it 'タブ区切りの変換行を作成します' do
    g = Generator.new
    g.変換表作成('a', 'あ').should eq(["a", "あ"])
  end
end

describe Generator, '#変換' do
  it '左上段を検査します' do 
    g = Generator.new
    g.変換('っ', 左右: :左, 段: :上, 番号: 0).should eq(["'", "っ"])
    g.変換('，', 左右: :左, 段: :上, 番号: 1).should eq([",", "，"])
    g.変換('．', 左右: :左, 段: :上, 番号: 2).should eq([".", "．"])
    g.変換('ー', 左右: :左, 段: :上, 番号: 3).should eq(["p", "ー"])
    g.変換('？', 左右: :左, 段: :上, 番号: 4).should eq(["y", "？"])
  end
  
  it '左中段（単母音）を検査します' do
    g = Generator.new
    g.変換('あ', 左右: :左, 段: :中, 番号: 0).should eq(["a", "あ"])
    g.変換('お', 左右: :左, 段: :中, 番号: 1).should eq(["o", "お"])
    g.変換('え', 左右: :左, 段: :中, 番号: 2).should eq(["e", "え"])
    g.変換('う', 左右: :左, 段: :中, 番号: 3).should eq(["u", "う"])
    g.変換('い', 左右: :左, 段: :中, 番号: 4).should eq(["i", "い"])
  end
  
  it '左中段（単母音・一括）を検査します' do
    g = Generator.new
    # 番号を省略した場合
    g.変換('あいうえお', 左右: :左, 段: :中).
      should eq([["a", "あ"], ["o", "い"], ["e", "う"], ["u", "え"], ["i", "お"]])
  end
  
  it '静音を検査します' do
    g = Generator.new
    g.変換('かきくけこ', 左右: :右, 段: :上, 番号: 2).
      should eq([["ca", "か"], ["ci", "き"], ["cu", "く"], ["ce", "け"], ["co", "こ"]])
    g.変換('さしすせそ', 左右: :右, 段: :中, 番号: 4).
      should eq([["sa", "さ"], ["si", "し"], ["su", "す"], ["se", "せ"], ["so", "そ"]])
    g.変換('たちつてと', 左右: :右, 段: :中, 番号: 2).
      should eq([["ta", "た"], ["ti", "ち"], ["tu", "つ"], ["te", "て"], ["to", "と"]])
    g.変換('なにぬねの', 左右: :右, 段: :中, 番号: 3).
      should eq([["na", "な"], ["ni", "に"], ["nu", "ぬ"], ["ne", "ね"], ["no", "の"]])
    g.変換('はひふへほ', 左右: :右, 段: :中, 番号: 1).
      should eq([["ha", "は"], ["hi", "ひ"], ["hu", "ふ"], ["he", "へ"], ["ho", "ほ"]])
    g.変換('まみむめも', 左右: :右, 段: :下, 番号: 1).
      should eq([["ma", "ま"], ["mi", "み"], ["mu", "む"], ["me", "め"], ["mo", "も"]])
    g.変換('や？ゆ？よ', 左右: :右, 段: :下, 番号: 3).
      should eq([["va", "や"], ["vi", "？"], ["vu", "ゆ"], ["ve", "？"], ["vo", "よ"]])
    g.変換('らりるれろ', 左右: :右, 段: :上, 番号: 3).
      should eq([["ra", "ら"], ["ri", "り"], ["ru", "る"], ["re", "れ"], ["ro", "ろ"]])
    g.変換('わゐ？ゑを', 左右: :右, 段: :下, 番号: 2).
      should eq([["wa", "わ"], ["wi", "ゐ"], ["wu", "？"], ["we", "ゑ"], ["wo", "を"]])
  end
  
  it '濁音を検査します' do
    g = Generator.new
    g.変換('がぎぐげご', 左右: :右, 段: :上, 番号: 1).
      should eq([["ga", "が"], ["gi", "ぎ"], ["gu", "ぐ"], ["ge", "げ"], ["go", "ご"]])
    g.変換('ざじずぜぞ', 左右: :右, 段: :下, 番号: 4).
      should eq([["za", "ざ"], ["zi", "じ"], ["zu", "ず"], ["ze", "ぜ"], ["zo", "ぞ"]])
    g.変換('だぢづでど', 左右: :右, 段: :中, 番号: 0).
      should eq([["da", "だ"], ["di", "ぢ"], ["du", "づ"], ["de", "で"], ["do", "ど"]])
    g.変換('ばびぶべぼ', 左右: :右, 段: :下, 番号: 0).
      should eq([["ba", "ば"], ["bi", "び"], ["bu", "ぶ"], ["be", "べ"], ["bo", "ぼ"]])
    g.変換('ぱぴぷぺぽ', 左右: :右, 段: :上, 番号: 0).
      should eq([["fa", "ぱ"], ["fi", "ぴ"], ["fu", "ぷ"], ["fe", "ぺ"], ["fo", "ぽ"]])
  end
  
  it '二重母音（あい，おう，えい，うう，うい）を検査します' do
    pending 'たいとうていつうつい など'
  end

  
  it '母音＋撥音（ん）を検査します' do
    g = Generator.new
    g.変換('あ', 左右: :左, 段: :下, 番号: 0, 撥音化: {}).should eq([";", "あん"])
    g.変換('い', 左右: :左, 段: :下, 番号: 4, 撥音化: {}).should eq(["x", "いん"])
    g.変換('う', 左右: :左, 段: :下, 番号: 3, 撥音化: {}).should eq(["k", "うん"])
    g.変換('え', 左右: :左, 段: :下, 番号: 2, 撥音化: {}).should eq(["j", "えん"])
    g.変換('お', 左右: :左, 段: :下, 番号: 1, 撥音化: {}).should eq(["q", "おん"])
  end
  
  it '子音+母音+撥音（単体）を検査します' do
    # pending "かん，きん，くん，けん，こん など"
    g = Generator.new
    g.変換("か", 左右: :右, 段: :上, 番号: 2, 撥音化: {左右: :左, 段: :下, 番号: 0}).
      should eq(["c;", "かん"])
  end
  
  it '子音+母音+撥音（一括）を検査します' do
    g = Generator.new
    g.変換("かきくけこ", 左右: :右, 段: :上, 番号: 2, 撥音化: {左右: :左, 段: :下}).
      should eq([["c;", "かん"], ["cx", "きん"], ["ck", "くん"], ["cj", "けん"], ["cq", "こん"]])
  end

  it '子音＋拗音化＋母音を検査します' do
    # pending 'きゃきぃきゅきぇきょなど'
    g = Generator.new
    g.変換('き', 左右: "右", 段: :上, 番号: 2, 拗音化: {左右: :右, 番号: 1}, 母音位置: {左右: :左, 段: :下}).
      should eq(nil)
  end
end


