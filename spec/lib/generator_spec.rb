# -*- coding: utf-8 -*-
require 'generator'

describe Generator, '#変換表作成' do
  it 'タブ区切りの変換行を作成します' do
    g = Generator.new
    g.変換表作成('a', 'あ').should eq(["a", "あ"])
  end
end

describe Generator, '#省略R' do
  it '鍵の位置を省略して指定します' do
    g = Generator.new
    g.省略R(位置: {左右: :左, 段: :中, 番号: 0}).should eq('a')
    g.省略R(位置: {左右: :左, 番号: 0}, 段: :中).should eq('a')
    expect{g.省略R(位置: {左右: :左, 番号: 0})}.to raise_error
    g.省略R(位置: {}).should eq('')
  end
end

describe Generator, '#変換' do
  it '直接位置指定登録を検査します' do 
    g = Generator.new
    g.変換('っ', 位置: [{左右: :左, 段: :上, 番号: 0}]).should eq(["'", "っ"])
    g.変換('，', 位置: [{左右: :左, 段: :上, 番号: 1}]).should eq([",", "，"])
    g.変換('．', 位置: [{左右: :左, 段: :上, 番号: 2}]).should eq([".", "．"])
    g.変換('ー', 位置: [{左右: :左, 段: :上, 番号: 3}]).should eq(["p", "ー"])
    g.変換('？', 位置: [{左右: :左, 段: :上, 番号: 4}]).should eq(["y", "？"])
    g.変換('ん', 位置: [{左右: :右, 段: :中, 番号: 3},
                        {左右: :右, 段: :中, 番号: 3}]).should eq(["nn", "ん"])
  end

  it '母音を検査します（あいうえお）' do
    g = Generator.new
    g.変換('あいうえお', 母音位置: {左右: :左, 段: :中}).
      should eq([["a", "あ"], ["i", "い"], ["u", "う"], ["e", "え"], ["o", "お"]])
  end
  
  it '母音+撥音を検査します（あん・いん・うん・えん・おん）' do
    g = Generator.new
    g.変換("あいうえお", 撥音位置: {}, 母音位置: {左右: :左, 段: :下}).
      should eq([[";", "あん"], ["x", "いん"], ["k", "うん"],
                 ["j", "えん"], ["q", "おん"]])
  end
  
  it '静音を検査します' do
    g = Generator.new
    g.変換('かきくけこ', 子音位置: {左右: :右, 段: :上, 番号: 2},
           母音位置: {左右: :左, 段: :中}).
      should eq([["ca", "か"], ["ci", "き"], ["cu", "く"], ["ce", "け"], ["co", "こ"]])
    g.変換('さしすせそ', 子音位置: {左右: :右, 段: :中, 番号: 4},
           母音位置: {左右: :左, 段: :中}).
      should eq([["sa", "さ"], ["si", "し"], ["su", "す"], ["se", "せ"], ["so", "そ"]])
    g.変換('たちつてと', 子音位置: {左右: :右, 段: :中, 番号: 2},
           母音位置: {左右: :左, 段: :中}).
      should eq([["ta", "た"], ["ti", "ち"], ["tu", "つ"], ["te", "て"], ["to", "と"]])
    g.変換('なにぬねの', 子音位置: {左右: :右, 段: :中, 番号: 3},
           母音位置: {左右: :左, 段: :中}).
      should eq([["na", "な"], ["ni", "に"], ["nu", "ぬ"], ["ne", "ね"], ["no", "の"]])
    g.変換('はひふへほ', 子音位置: {左右: :右, 段: :中, 番号: 1},
           母音位置: {左右: :左, 段: :中}).
      should eq([["ha", "は"], ["hi", "ひ"], ["hu", "ふ"], ["he", "へ"], ["ho", "ほ"]])
    g.変換('まみむめも', 子音位置: {左右: :右, 段: :下, 番号: 1},
           母音位置: {左右: :左, 段: :中}).
      should eq([["ma", "ま"], ["mi", "み"], ["mu", "む"], ["me", "め"], ["mo", "も"]])
    g.変換('や？ゆ？よ', 子音位置: {左右: :右, 段: :下, 番号: 3},
           母音位置: {左右: :左, 段: :中}).
      should eq([["va", "や"], ["vi", "？"], ["vu", "ゆ"], ["ve", "？"], ["vo", "よ"]])
    g.変換('らりるれろ', 子音位置: {左右: :右, 段: :上, 番号: 3},
           母音位置: {左右: :左, 段: :中}).
      should eq([["ra", "ら"], ["ri", "り"], ["ru", "る"], ["re", "れ"], ["ro", "ろ"]])
    g.変換('わゐ？ゑを', 子音位置: {左右: :右, 段: :下, 番号: 2},
           母音位置: {左右: :左, 段: :中}).
      should eq([["wa", "わ"], ["wi", "ゐ"], ["wu", "？"], ["we", "ゑ"], ["wo", "を"]])
  end
  
  it '濁音・半濁音を検査します' do
    g = Generator.new
    g.変換('がぎぐげご', 子音位置: {左右: :右, 段: :上, 番号: 1},
           母音位置: {左右: :左, 段: :中}).
      should eq([["ga", "が"], ["gi", "ぎ"], ["gu", "ぐ"], ["ge", "げ"], ["go", "ご"]])
    g.変換('ざじずぜぞ', 子音位置: {左右: :右, 段: :下, 番号: 4},
           母音位置: {左右: :左, 段: :中}).
      should eq([["za", "ざ"], ["zi", "じ"], ["zu", "ず"], ["ze", "ぜ"], ["zo", "ぞ"]])
    g.変換('だぢづでど', 子音位置: {左右: :右, 段: :中, 番号: 0},
           母音位置: {左右: :左, 段: :中}).
      should eq([["da", "だ"], ["di", "ぢ"], ["du", "づ"], ["de", "で"], ["do", "ど"]])
    g.変換('ばびぶべぼ', 子音位置: {左右: :右, 段: :下, 番号: 0},
           母音位置: {左右: :左, 段: :中}).
      should eq([["ba", "ば"], ["bi", "び"], ["bu", "ぶ"], ["be", "べ"], ["bo", "ぼ"]])
    g.変換('ぱぴぷぺぽ', 子音位置: {左右: :右, 段: :上, 番号: 0},
           母音位置: {左右: :左, 段: :中}).
      should eq([["fa", "ぱ"], ["fi", "ぴ"], ["fu", "ぷ"], ["fe", "ぺ"], ["fo", "ぽ"]])
  end
  
  it '子音+母音+撥音（一括）を検査します' do
    g = Generator.new
    g.変換("かきくけこ",
           子音位置: {左右: :右, 段: :上, 番号: 2},
           撥音位置: {},
           母音位置: {左右: :左, 段: :下}). # 番号は省略
      should eq([["c;", "かん"], ["cx", "きん"], ["ck", "くん"], ["cj", "けん"], ["cq", "こん"]])
  end

  it '子音＋拗音化＋母音を検査します' do
    # pending 'きゃきぃきゅきぇきょなど'
    g = Generator.new
    g.変換('き',
           子音位置: {左右: :右, 段: :上, 番号: 2},
           拗音位置: {左右: :右, 番号: 1},
           撥音位置: {}, # 撥音化鍵は省略
           母音位置: {左右: :左, 段: :下}).
       should eq([["cg;", "きゃん"], ["cgx", "きぃん"], ["cgk", "きゅん"], ["cgj", "きぇん"], ["cgq", "きょん"]])
  end
  
  ## きゃっきぃっきゅっきぇっきょっなど
  it '子音＋拗音＋母音＋促音を検査します' do
    g = Generator.new
    ## 
    g.変換('き',
           子音位置: {左右: :右, 段: :上, 番号: 2},
           拗音位置: {}, # 拗音化鍵は省略
           促音位置: {左右: :右, 番号: 0},
           母音位置: {左右: :左, 段: :上}
           ).
       should eq([["cf'", "きゃっ"], ["cfy", "きぃっ"], ["cfp", "きゅっ"], ["cf.", "きぇっ"], ["cf,", "きょっ"]])
    g.変換('き',
           子音位置: {左右: :右, 段: :上, 番号: 2},
           拗音位置: {},
           促音位置: {左右: :右, 段: :中, 番号: 0}, # 文字固定の場合
           母音位置: {左右: :左, 段: :上}
           ).
       should eq([["cd'", "きゃっ"], ["cdy", "きぃっ"], ["cdp", "きゅっ"], ["cd.", "きぇっ"], ["cd,", "きょっ"]])
  end

  it '二重母音（あい，おう，えい，うう，うい）を検査します' do
    pending 'たいとうていつうつい など'
  end
  
  # かい，くい（キー），くう（クー），けい（ケー），こう（コー）
  it '二重母音（かい，こう，けい，くう，くい）を検査します' do
    pending 'たいとうていつうつい など'
  end
end


