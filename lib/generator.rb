#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require('pry')

class Generator
  def initialize
    # キーボード配列の表
    @鍵盤 = {
      左: {
        上: ['\'', ',', '.', 'p', 'y'],
        中: ['a', 'o', 'e', 'u', 'i'],
        下: [';', 'q', 'j', 'k', 'x']
      },
      右: {
        上: ['f', 'g', 'c', 'r', 'l'],
        中: ['d', 'h', 't', 'n', 's'],
        下: ['b', 'm', 'w', 'v', 'z']
      }
    }
    # 母音
    @母音ローマ字 = 'aiueo'
    
    # 01234    04321
    # aiueo -> aoeui
    @母音順 = [0, 4, 3, 2, 1]

    @拗音 = ['ゃ', 'ぃ', 'ゅ', 'ぇ', 'ょ']
  end
  
  def 変換表作成(ローマ字, かな)
    [ローマ字, かな]
  end

  def 省略(位置, 段)
    case
    when 位置 == {} # 不要か？
      '' # 変化鍵省略
    when !位置[:段]
      @鍵盤[位置[:左右]][段][位置[:番号]]
    else
      @鍵盤[位置[:左右]][位置[:段]][位置[:番号]]
    end
  end

  def 変換(かな, 左右: nil, 段: nil, 番号: nil,
           子音位置: nil, 母音位置: nil,
           拗音位置: nil, 撥音位置: nil, 促音位置: nil)
    case
    when 左右 == :左 && 番号 != nil
      ## 母音・単体
      if 撥音位置 != nil
        かな += 'ん'
      end
      変換表作成 @鍵盤[左右][段][番号], かな
    when 左右 == :左 && 番号 == nil && かな.length == 5
      ## 母音・一括
      結果 = []
      for 番号 in 0..4
        結果 << 変換表作成(@鍵盤[左右][段][番号], かな[番号])
      end
      結果
    when 左右 == :右 && かな.length == 5 && 撥音位置 == nil
      ## 子音・一括
      結果 = []
      子音 = @鍵盤[左右][段][番号]
      for 番号 in 0..4
        母音 = @母音ローマ字[番号]
        結果 << 変換表作成("#{子音}#{母音}", かな[番号])
      end
      結果
    when 左右 == :右 && かな.length == 1 && 撥音位置 != nil
      ## 子音・単体・撥音位置
      子音 = @鍵盤[左右][段][番号]
      母音 = @鍵盤[撥音位置[:左右]][撥音位置[:段]][撥音位置[:番号]]
      かな += 'ん'
      変換表作成("#{子音}#{母音}", かな)
    when 左右 == :右 && かな.length == 5 && 撥音位置 != nil
      ## 子音・単体・撥音位置（一括）
      子音 = @鍵盤[左右][段][番号]
      結果 = []
      for 番号 in 0..4
        母音 = @鍵盤[撥音位置[:左右]][撥音位置[:段]][@母音順[番号]]
        結果 << 変換表作成("#{子音}#{母音}", かな[番号] + 'ん')
      end
      結果
    when 子音位置 && 拗音位置 && 母音位置
      子音R = @鍵盤[子音位置[:左右]][子音位置[:段]][子音位置[:番号]]
      
      if 拗音位置
        拗音R = 省略 拗音位置, 子音位置[:段]
      else
        拗音R = ''
      end
      
      if 促音位置
        促音R = 省略 促音位置, 子音位置[:段]
        促音 = 'っ'
      else
        促音R = ''
        促音 = ''
      end
    
      if 撥音位置
        撥音 = 'ん'
      else
        撥音 = ''
      end
      
      結果 = []
      for 番号 in 0..4
        # 拗音化鍵は子音と同じ段の指定番号
        母音R = @鍵盤[母音位置[:左右]][母音位置[:段]][@母音順[番号]]
        拗音 = @拗音[番号]
        結果 << 変換表作成("#{子音R}#{拗音R}#{促音R}#{母音R}",
                           "#{かな}#{拗音}#{促音}#{撥音}")
      end
      結果
      
    else
      raise '定義できません'
    end
  end
end
