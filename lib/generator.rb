#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require('pry')

class Generator
  def initialize
    # キーボード配列の表
    @鍵盤 = {
      左: {
        上: ['\'', ',', '.', 'p', 'y'],
        中: ['a', 'o', 'e', 'u', 'i'],
        下: [';', 'q', 'j', 'k', 'x']
      },
      右: {
        上: ['f', 'g', 'c', 'r', 'l'],
        中: ['d', 'h', 't', 'n', 's'],
        下: ['b', 'm', 'w', 'v', 'z']
      }
    }
    # 母音
    @母音ローマ字 = 'aiueo'
    
    # 01234    04321
    # aiueo -> aoeui
    @母音順 = [0, 4, 3, 2, 1]

    @拗音 = ['ゃ', 'ぃ', 'ゅ', 'ぇ', 'ょ']
  end
  
  def 変換表作成(ローマ字, かな)
    [ローマ字, かな]
  end

  # 省略して位置を指定された場合です
  def 省略R(位置: nil, 段: nil)
    case
    when 位置 == {} # 変化鍵の省略
      ''
    when !位置[:段] # 位置の省略
      raise '位置の段が省略されているため段を指定してください' if 段 == nil
      @鍵盤[位置[:左右]][段][位置[:番号]]
    else
      @鍵盤[位置[:左右]][位置[:段]][位置[:番号]]
    end
  end

  def 変換(かな,
           子音位置: nil, 母音位置: nil,
           拗音化: nil, 撥音化: nil, 促音化: nil,
           位置: nil)
    case
    when 位置
      ローマ字 = ''
      位置.each do |位置I|
        ローマ字 += @鍵盤[位置I[:左右]][位置I[:段]][位置I[:番号]]
      end
      [変換表作成(ローマ字, かな)]
    when 
      子音R = 子音位置 ? @鍵盤[子音位置[:左右]][子音位置[:段]][子音位置[:番号]] : ''
      拗音R = 拗音化 ? 省略R(位置: 拗音化, 段: 子音位置[:段]) : ''
      促音R = 促音化 ? 省略R(位置: 促音化, 段: 子音位置[:段]) : ''
      
      促音 = 促音化 ? 'っ' : ''
      撥音 = 撥音化 ? 'ん' : ''
      
      結果 = []
      for 番号 in 0..4
        母音R = @鍵盤[母音位置[:左右]][母音位置[:段]][@母音順[番号]]
        拗音 = 拗音化 ? @拗音[番号] : ''
        if かな.length == 5
          結果 << 変換表作成("#{子音R}#{拗音R}#{促音R}#{母音R}", "#{かな[番号]}#{拗音}#{促音}#{撥音}")
        elsif かな.length == 1
          結果 << 変換表作成("#{子音R}#{拗音R}#{促音R}#{母音R}", "#{かな}#{拗音}#{促音}#{撥音}")
        else
          raise 'かなは1文字または5文字で指定してください．'
        end
      end
      結果
    end
  end

  def 行(行)
    @五十音表[行]
  end

  def 母音位置(左右, 段, 番号: nil)
    case
    when !番号
      @母音順 or raise '番号を省略する場合は母音順を設定してください．'
      結果 = []
      for 番号 in 0..4
        結果 << {左右: 左右, 段: 段, 番号: @母音順[番号]}
      end
      結果
    else
      (0..4).include?(番号) or raise '番号は[0..4]で指定してください．'
      [{左右: 左右, 段: 段, 番号: 番号}]
    end
  end
end
